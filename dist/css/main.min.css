@import url(https://fonts.googleapis.com/css?family=Poppins:300,400,500,600);html{color:#000;background:#fff}body,div,html,section{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}section{display:block}body{-webkit-font-smoothing:antialiased;line-height:1}@font-face{font-family:villas;src:url(../fonts/custom-fonts/villas.eot);src:url(../fonts/custom-fonts/villas.eot?#iefix) format("embedded-opentype"),url(../fonts/custom-fonts/villas.woff) format("woff"),url(../fonts/custom-fonts/villas.ttf) format("truetype"),url(../fonts/custom-fonts/villas.svg#villas) format("svg");font-weight:400;font-style:normal}html{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-tap-highlight-color:transparent}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit;padding:0;margin:0}body{overflow-x:hidden;height:100%}body *{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-family:Poppins,sans-serif}main{display:block;background:#f6f6f6;padding-top:55px;padding-bottom:80px;min-height:100vh}@media (min-width:768px){main{padding-top:120px}}@media (max-width:991px){main{display:none}}*{outline:0}ul li{list-style:none}.section-container{width:auto;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.section-container::after{content:'';display:table;clear:both}@media (min-width:992px){.section-container{width:auto;max-width:970px;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.section-container::after{content:'';display:table;clear:both}}@media (min-width:1200px){.section-container{width:auto;max-width:1200px;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.section-container::after{content:'';display:table;clear:both}}.slider-container{background:#5c6bc0}.slide{background:#1a237e}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */

@import url(https://fonts.googleapis.com/css?family=Poppins:300,400,500,600);html{color:#000;background:#fff}body,div,html,section{margin:0;padding:0;border:0;font-size:100%;font:inherit;vertical-align:baseline}section{display:block}body{-webkit-font-smoothing:antialiased;line-height:1}@font-face{font-family:villas;src:url(../fonts/custom-fonts/villas.eot);src:url(../fonts/custom-fonts/villas.eot?#iefix) format("embedded-opentype"),url(../fonts/custom-fonts/villas.woff) format("woff"),url(../fonts/custom-fonts/villas.ttf) format("truetype"),url(../fonts/custom-fonts/villas.svg#villas) format("svg");font-weight:400;font-style:normal}html{-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-tap-highlight-color:transparent}*,:after,:before{-webkit-box-sizing:inherit;box-sizing:inherit;padding:0;margin:0}body{overflow-x:hidden;height:100%}body *{-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;font-family:Poppins,sans-serif}main{display:block;background:#f6f6f6;padding-top:55px;padding-bottom:80px;min-height:100vh}@media (min-width:768px){main{padding-top:120px}}*{outline:0}ul li{list-style:none}.section-container{width:auto;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:15px;padding-right:15px}.section-container::after{content:'';display:table;clear:both}@media (min-width:992px){.section-container{width:auto;max-width:970px;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.section-container::after{content:'';display:table;clear:both}}@media (min-width:1200px){.section-container{width:auto;max-width:1200px;float:none;display:block;margin-right:auto;margin-left:auto;padding-left:0;padding-right:0}.section-container::after{content:'';display:table;clear:both}}.slide{background:#1a237e;background:red}*{font-size:16px}.slider-container{background:#5c6bc0;position:relative}.slider-parent{position:relative;transition:-ms-transform .5s,-webkit-transform .5s,transform .5s!important;overflow-x:auto;overflow-y:hidden;white-space:nowrap;font-size:0}.slider-parent::-webkit-scrollbar{-webkit-appearance:none;display:none}@media (min-width:768px){.slider-parent{overflow:visible}}.slider-gran{margin-left:-1.25%;margin-right:-1.25%}@media (min-width:768px){.slider-gran{overflow:hidden}}.round-arrow{position:absolute;top:50%;-webkit-transform:translateY(-50%);-ms-transform:translateY(-50%);transform:translateY(-50%);width:45px;height:45px;background:#fff;z-index:99;-webkit-box-shadow:0 1px 10px 1px rgba(183,183,183,.4);box-shadow:0 1px 10px 1px rgba(183,183,183,.4);display:-webkit-box;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-ms-flex-pack:center;justify-content:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;border-radius:50%}@media (max-width:767px){.round-arrow{display:none}}.round-arrow--left{left:-20px;display:none}.round-arrow--right{right:-20px}.swypeSlide{position:relative;width:43%;white-space:normal;display:inline-block;vertical-align:top;padding-left:1.25%;padding-right:1.25%}@media (min-width:768px){.swypeSlide{width:33.33%}}.swypeSlide div{border:solid}.slider-parent{transition:-ms-transform .5s,-webkit-transform .5s,transform .5s!important;overflow-x:auto;overflow-y:hidden;white-space:nowrap;font-size:0}@media (min-width:768px){.slider-parent{overflow:visible}}
/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
